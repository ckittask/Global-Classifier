declaration:
  call: declare
  version: 0.1
  description: "Dataset Generation for Global Classifier"
  method: post
  accepts: json
  returns: json
  namespace: global-classifier
  allowlist:
    body:
      - field: preSignedUrls
        type: json
        description: "Request body containing dataset generation details with set of signed URLs and agencyId"

extract_request_data:
  assign:
    url_list: ${incoming.body.preSignedUrls}
    encoded_urls: ${encodeURIComponent(JSON.stringify(url_list))}
  next: log_request

log_request:
  log: "Dataset generation request received with response: ${url_list}"
  next: log_query_request

log_query_request:
  log: "----- ${encodeURIComponent(JSON.stringify(url_list))} -----"
  next: execute_cron_manager

execute_cron_manager:
  call: http.post
  args:
    url: "[#GLOBAL_CLASSIFIER_CRON_MANAGER]/execute/synthetic_dataset_generation/dataset_generator"
    query:
        signedUrls: ${encoded_urls}
  result: cron_res
  next: log_request_execute_cron_manager

log_request_execute_cron_manager:
  log: "Executing cron manager for dataset generation response: ${cron_res}"
  next: cron_job_format_res

# check_cron_status:
#   switch:
#     - condition: ${cron_res.status >= 200 && cron_res.status < 300}
#       next: cron_job_format_res
#   next: return_error

cron_job_format_res:
  assign:
    format_res:
      operationSuccessful: true
      message: "Dataset generation job scheduled successfully"
  next: return_success

return_success:
  status: 200
  return: ${format_res}
  next: end

return_error:
  status: 500
  return: '{"operationSuccessful": false, "message": "Failed to schedule dataset generation job"}'
  next: end